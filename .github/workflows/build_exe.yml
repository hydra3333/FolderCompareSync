name: Build FolderCompareSync EXE and Upload to Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
      # 1) Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 3) Install dependencies
      - name: Install required packages
        run: |
          pip install --upgrade --retries 10 pyinstaller python-dateutil tzdata

      # 4) Verify dependencies
      - name: Verify dependencies
        run: |
          python -c "import zoneinfo; print('zoneinfo: OK')"
          python -c "from dateutil.tz import tzwinlocal; print('python-dateutil: OK')"
          python -c "import tkinter; print('tkinter: OK')"
        shell: cmd

      # 5) Find Python site-packages path dynamically
      - name: Get site-packages path
        id: python_paths
        run: |
          python -c "import site; print('SITE_PACKAGES=' + site.getsitepackages()[0])" >> %GITHUB_ENV%
          python -c "import zoneinfo; print('ZONEINFO_PATH=' + zoneinfo.__file__.replace('__init__.py', ''))" >> %GITHUB_ENV%
        shell: cmd

      # 6) Build EXE (GUI)
      - name: Build executable with PyInstaller (for GUI app)
        run: |
          echo Using zoneinfo path: %ZONEINFO_PATH%
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --windowed --noupx --add-data "%ZONEINFO_PATH%;zoneinfo" FolderCompareSync.py
        shell: cmd
        #continue-on-error: true

      # 7) Fallback: console mode if GUI build failed
      - name: Build executable (console fallback)
        if: failure()
        run: |
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --console --noupx --add-data "%ZONEINFO_PATH%;zoneinfo" FolderCompareSync.py
        shell: cmd
        #continue-on-error: true

      # 8) Fallback: minimal build if still failing
      - name: Build executable (minimal fallback)
        if: failure()
        run: |
          echo Trying build without explicit zoneinfo data - PyInstaller should auto-detect it
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --console --noupx FolderCompareSync.py
        shell: cmd

      # 9) Fail early if EXE is missing
      - name: Verify EXE exists
        run: |
          if not exist dist\FolderCompareSync.exe (
            echo ERROR: EXE not found. Build failed.
            exit /b 1
          )
        shell: cmd

      # 10) Validate executable
      - name: Validate executable
        run: |
          echo Validating executable properties...
          echo File size:
          for %%F in (dist\FolderCompareSync.exe) do echo %%~zF bytes
          echo.
          echo File exists and is executable: 
          if exist dist\FolderCompareSync.exe (echo ✓ PASS) else (echo ✗ FAIL)
          echo.
          echo Note: GUI apps cannot be tested in headless CI environment
        shell: cmd

      # 11) Debug: list build output
      - name: List build output
        run: |
          echo === Root directory ===
          dir
          echo === dist directory ===
          dir dist
          echo === build directory ===
          dir build
          echo === EXE details ===
          dir dist\FolderCompareSync.exe
        shell: cmd

      # 12) Determine artifact name (include release tag or 'manual-build')
      - name: Set artifact name
        id: artifact_name
        run: |
          if "%GITHUB_EVENT_NAME%"=="release" (
            echo ARTIFACT_NAME=FolderCompareSync-%GITHUB_REF_NAME%>> %GITHUB_ENV%
          ) else (
            echo ARTIFACT_NAME=FolderCompareSync-manual-build>> %GITHUB_ENV%
          )
        shell: cmd

      # 13) Generate SHA512 checksum
      - name: Generate SHA512 checksum
        run: |
          certutil -hashfile dist\FolderCompareSync.exe SHA512 > dist\FolderCompareSync.exe.sha512
        shell: cmd

      # 14) Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            dist/FolderCompareSync.exe
            dist/FolderCompareSync.exe.sha512

      # 15) Upload to GitHub Release (append notes to what is typed in when creating the Release)
      - name: Upload to GitHub release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/FolderCompareSync.exe
            dist/FolderCompareSync.exe.sha512
          append_body: true
          body: |
            ---
            **Standalone EXE build details (CI)**
            • Python 3.13 + PyInstaller (optimized)
            • Bundled python modules: tzdata, python-dateutil, tkinter
            • A SHA512 checksum is attached (FolderCompareSync.exe.sha512) for verification of github auto-built Standalone EXE

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
