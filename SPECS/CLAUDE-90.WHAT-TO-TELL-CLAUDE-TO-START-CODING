I need you to perform incremental updates to a Python FileCopyManager_class.py module and related modules
to implement enhanced file copying and verification and rollback capabilities based on a detailed technical specification.

**WHAT TO DO:** 
- Read the attached technical specification for change
- Ensure alignment with the goals and compliance with the mandatory requirements
- Use the techical specification to inform coding and commenting, particularly in regard to specified technical options and processes

**APPROACH:**
- ensure code uses the latest python techniques, inbuilts and structures etc available in python 3.13+ under Windows 10 / Windows 11
- Update existing FileCopyManager_class.py module incrementally
- Maintain existing API compatibility and integration patterns where pragmatic, recognising some change may be needed (eg where overwrite capability is removed) 
- Preserve working error handling and logging and provide debug logging (per existing logging patetrns) except for inside tight performance loops (eg copying, verifying, hashing)
- Add new functionality alongside existing code where pragmatic
- Keep all code readable and well-commented

**KEY REQUIREMENTS:**
0. As outlined in the technical specification :-
1. Implement secure temporary file rollback process (never corrupt original target files)
2. Add DIRECT strategy (Windows CopyFileExW + memory-mapped verification for local files <2GB)
3. Add STAGED strategy (chunked I/O + BLAKE3 hashing for network files or >=2GB files)
4. Add three-mode verification system controlled by UI radio buttons
5. Integrate with existing timestamp management and progress reporting
6. Add comprehensive debug logging (except in tight performance loops)
7. Update global constants and imports as specified
8. Maintain backward compatibility with existing code

**IMPLEMENTATION PRIORITIES:**
1. Add new global constants to FolderCompareSync_Global_Constants.py
2. Add Windows API bindings and their related Constants to FolderCompareSync_Global_Constants.py since they are more like definitions with their own specific Constants
3. Implement secure and *very robust* copy and hashing and verification and rollback methods in FileCopyManager_class.py
4. Add verification radio buttons integration in the main UI
5. Update timestamp management integration
6. Add comprehensive error handling and logging (except in tight performance loops), use existing log_and_flush approach per existing code

**TESTING:** I have an existing test kit to create folder trees with edge cases to verify the program
1. include reasonable debug logging throughout (except in performance-critical copy/verify/hashing loops)

**FILES ATTACHED:**
- Technical specification document (contains all detailed requirements)
- FileCopyManager_class.py (current implementation to update)
- FolderCompareSync_Global_Constants.py (needs new constants)
- FolderCompareSync_Global_Imports.py (needs Windows API bindings)
- FileTimestampManager_class.py (for integration)
- FolderCompareSync_class.py (for UI integration points)

Please analyze the specification and current code, then provide incremental updates to achieve the technical requirements while maintaining existing functionality and readability.

**ATTACHED FILES:**
1. **CLAUDE-file_copy_manager_refactor_spec_v??.md** (technical specification)
2. **FileCopyManager_class.py** (current implementation)
3. **FolderCompareSync_Global_Constants.py** (current constants)
4. **FolderCompareSync_Global_Imports.py** (current imports)
5. **FileTimestampManager_class.py** (for timestamp integration)
6. **FolderCompareSync_class.py** (for UI integration context)

Before you do any coding, 
(a) confirm to me whether or not you understand this and the attachments
(b) if you need clarification then ask me before doing any coding
(c) before doing any coding, ask me whether to proceed with coding per the above and the specification



