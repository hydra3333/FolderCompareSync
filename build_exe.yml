name: Build FolderCompareSync EXE and Upload to Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 3. Install dependencies
      - name: Install required packages
        run: |
          pip install --upgrade --retries 10 pyinstaller python-dateutil tzdata

      # 4. Verify dependencies are installed correctly
      - name: Verify dependencies
        run: |
          python -c "import zoneinfo; print('zoneinfo: OK')"
          python -c "from dateutil.tz import tzwinlocal; print('python-dateutil: OK')"
          python -c "import tkinter; print('tkinter: OK')"
        shell: cmd

      # 5. Find Python site-packages path dynamically
      - name: Get site-packages path
        id: python_paths
        run: |
          python -c "import site; print('SITE_PACKAGES=' + site.getsitepackages()[0])" >> %GITHUB_ENV%
          python -c "import zoneinfo; print('ZONEINFO_PATH=' + zoneinfo.__file__.replace('__init__.py', ''))" >> %GITHUB_ENV%
        shell: cmd

      # 6. Build EXE with PyInstaller (optimized for GUI app)
      - name: Build executable
        run: |
          echo Using zoneinfo path: %ZONEINFO_PATH%
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --windowed --noupx --add-data "%ZONEINFO_PATH%;zoneinfo" FolderCompareSync.py
        shell: cmd

      # 7. Fallback: Try console mode if windowed fails
      - name: Build executable (console fallback)
        if: failure()
        run: |
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --console --noupx --add-data "%ZONEINFO_PATH%;zoneinfo" FolderCompareSync.py
        shell: cmd

      # 8. Fallback: Try without explicit zoneinfo data if still failing
      - name: Build executable (minimal fallback)
        if: failure()
        run: |
          echo Trying build without explicit zoneinfo data - PyInstaller should auto-detect it
          set PYTHONOPTIMIZE=1 && pyinstaller --onefile --clean --name FolderCompareSync --console --noupx FolderCompareSync.py
        shell: cmd

      # 9. Fail early if EXE is missing
      - name: Verify EXE exists
        run: |
          if not exist dist\FolderCompareSync.exe (
            echo ERROR: EXE not found. Build failed.
            exit /b 1
          )
        shell: cmd

      # 10. Test the executable briefly
      - name: Test executable
        run: |
          echo Testing executable...
          dist\FolderCompareSync.exe --help || echo "Note: GUI app may not support --help flag"
        shell: cmd

      # 11. Debug: List build output
      - name: List build output
        run: |
          echo === Root directory ===
          dir
          echo === dist directory ===
          dir dist
          echo === build directory ===
          dir build
          echo === EXE details ===
          dir dist\FolderCompareSync.exe
        shell: cmd

      # 12. Determine artifact name (include release tag or 'manual-build')
      - name: Set artifact name
        id: artifact_name
        run: |
          if "%GITHUB_EVENT_NAME%"=="release" (
            echo ARTIFACT_NAME=FolderCompareSync-%GITHUB_REF_NAME%>> %GITHUB_ENV%
          ) else (
            echo ARTIFACT_NAME=FolderCompareSync-manual-build>> %GITHUB_ENV%
          )
        shell: cmd

      # 13. Generate SHA512 checksum
      - name: Generate SHA512 checksum
        run: |
          certutil -hashfile dist\FolderCompareSync.exe SHA512 > dist\FolderCompareSync.exe.sha512
        shell: cmd

      # 14. Create release notes file
      - name: Create release info
        run: |
          echo FolderCompareSync Standalone Executable > dist\README.txt
          echo. >> dist\README.txt
          echo Built with Python 3.13 and PyInstaller >> dist\README.txt
          echo Includes all required dependencies: >> dist\README.txt
          echo - python-dateutil for timezone support >> dist\README.txt
          echo - tzdata for timezone database >> dist\README.txt
          echo - tkinter for GUI interface >> dist\README.txt
          echo. >> dist\README.txt
          echo Run FolderCompareSync.exe to start the application >> dist\README.txt
          echo. >> dist\README.txt
          echo Build date: %DATE% %TIME% >> dist\README.txt
        shell: cmd

      # 15. Upload EXE, SHA512, and README as a GitHub Actions artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            dist/FolderCompareSync.exe
            dist/FolderCompareSync.exe.sha512
            dist/README.txt

      # 16. Upload to GitHub Release (only if triggered by release)
      - name: Upload to GitHub release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/FolderCompareSync.exe
            dist/FolderCompareSync.exe.sha512
            dist/README.txt
          body: |
            ## FolderCompareSync Standalone Executable
            
            This release includes a standalone Windows executable built with:
            - Python 3.13
            - PyInstaller (optimized build)
            - All required dependencies bundled
            
            ### Dependencies Included:
            - `python-dateutil` - Advanced timezone support
            - `tzdata` - Timezone database  
            - `tkinter` - GUI framework
            
            ### Usage:
            Simply download `FolderCompareSync.exe` and run it - no Python installation required!
            
            ### Files:
            - `FolderCompareSync.exe` - Main executable
            - `FolderCompareSync.exe.sha512` - Checksum for verification
            - `README.txt` - Build information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}